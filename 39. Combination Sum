class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> selected = new ArrayList<>();
        backtracking(candidates, res, selected, target, 0);
        return res;
    }
    
    public void backtracking(int[] candidates, List<List<Integer>> res, List<Integer> selected, int remain, int start) {
        if(remain == 0) {
            res.add(new ArrayList<Integer>(selected));
            // return;
        }else if(remain < 0) {
            return;
        }else {
            for(int i = start; i < candidates.length; i++) {
                selected.add(candidates[i]);
                backtracking(candidates, res, selected, remain - candidates[i], i);
                selected.remove(selected.size() - 1);
            }
        }
    }
}
