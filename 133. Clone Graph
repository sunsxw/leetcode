/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if(node == null){
            return node;
        }
        
        HashMap<Node, Node> map = new HashMap<>();
        return dfs(node, map);
    }
    
    public Node dfs(Node node, HashMap<Node, Node> map){
        Node copy = new Node(node.val, new ArrayList<>());
        map.put(node, copy);
        
        if(node.neighbors != null){
            for(Node next : node.neighbors){
                Node nextCopy = map.get(next);
                if(nextCopy == null){
                    nextCopy = dfs(next, map);
                    map.put(next, nextCopy);
                }
                copy.neighbors.add(nextCopy);
            }
        }
        return copy;
    }
}
