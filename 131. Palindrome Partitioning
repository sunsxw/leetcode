class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> selected = new ArrayList<>();
        backtracking(s, res, selected);
        return res;
    }
    
    public void backtracking(String remain, List<List<String>> res, List<String> selected) {
        if(remain.length() == 0) {
            if(selected.size() > 0) {
                res.add(new ArrayList<String>(selected));
            }
            return;
        }
        
        for(int i = 0; i < remain.length(); i++) {
            if(isPalindrom(remain, 0, i)) {
                String part = remain.substring(0, i + 1);
                selected.add(part);
                backtracking(remain.substring(i + 1), res, selected);
                selected.remove(selected.size() - 1);
            }
        }
    }
    
    public boolean isPalindrom(String s, int i, int j) {
        while(i < j) {
            if(s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
