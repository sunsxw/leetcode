class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();
        //corner case
        if(digits == null || digits.length() == 0){
            return result;
        }
        
        StringBuilder sb = new StringBuilder();
        Map<Integer, String> dict = constructMapDict();
        helperDFS(digits, result, sb, dict, 0);
        return result;
    }
    
    public void helperDFS(String digits, List<String> result, StringBuilder sb, Map<Integer, String> dict, int index) {
        //base case
        if(index == digits.length()) {
            result.add(sb.toString());
            return;
        }
        
        //recurstion rule
        int cur = digits.charAt(index) - '0';
        String values = dict.get(cur);
        for(char c : values.toCharArray()) {
            sb.append(c);
            helperDFS(digits, result, sb, dict, index + 1);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
    
    private Map<Integer, String> constructMapDict() {
        Map<Integer, String> wordDict = new HashMap<Integer, String>();
        wordDict.put(0, "");
        wordDict.put(1, "");
        wordDict.put(2, "abc");
        wordDict.put(3, "def");
        wordDict.put(4, "ghi");
        wordDict.put(5, "jkl");
        wordDict.put(6, "mno");
        wordDict.put(7, "pqrs");
        wordDict.put(8, "tuv");
        wordDict.put(9, "wxyz");
        return wordDict;
    }
}
