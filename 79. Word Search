class Solution {
    public boolean exist(char[][] board, String word) {
        if(board == null || board.length == 0 || board[0].length == 0) {
            return false;
        }
        
        boolean[][] visited = new boolean[board.length][board[0].length];
        
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[i].length; j++) {
                if(dfs(board, word, i, j, 0, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean dfs(char[][] board, String word, int row, int col, int index, boolean[][] visited) {
         if(index == word.length()) {
            return true;
        }
        
        // over the board size
        if(row < 0 || row >= board.length || col < 0 || col >= board[row].length) {
            return false;
        }
        
        //visited or not equal to the word letter
        if(board[row][col] != word.charAt(index) || visited[row][col]) {
            return false;
        }
        
       
        
        visited[row][col] = true;
        
        if(dfs(board, word, row, col + 1, index + 1, visited) 
           || dfs(board, word, row, col - 1, index + 1, visited) 
           || dfs(board, word, row + 1, col, index + 1, visited) 
           || dfs(board, word, row - 1, col, index + 1, visited)) {
            return true;
        }
        
        visited[row][col] = false;
        return false;
    }
}
