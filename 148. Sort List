/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null) {
            return head;
        }
        
        ListNode mid = findMiddle(head);
        ListNode right = sortList(mid.next);
        mid.next = null;
        ListNode left = sortList(head);
        return mergeList(left, right);
    }
    
    public ListNode findMiddle(ListNode head) {
        ListNode fast = head.next, slow = head;
        while(fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    
    public ListNode mergeList(ListNode node1, ListNode node2) {
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        while(node1 != null && node2 != null) {
            if(node1.val > node2.val) {
                tail.next = node2;
                node2 = node2.next;
            }else {
                tail.next = node1;
                node1 = node1.next;
            }
            tail = tail.next;
        }
        
        if(node1 != null) {
            tail.next = node1;
        }
        
        if(node2 != null) {
            tail.next = node2;
        }
        return dummy.next;
    }
}
